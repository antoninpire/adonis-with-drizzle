import { extendZodWithOpenApi } from '@anatine/zod-openapi'
import { initContract } from '@ts-rest/core'
import { generateOpenApi } from '@ts-rest/open-api'
import { z } from 'zod'

extendZodWithOpenApi(z)

const c = initContract()

export const contract = c.router({
  getUser: {
    method: 'GET',
    path: '/users/:id',
    pathParams: z.object({
      id: z.string().openapi({
        description: "The user's ID",
      }),
    }),
    responses: {
      200: z
        .object({
          id: z.string().uuid().openapi({
            title: 'Unique ID',
            description: 'A UUID generated by the server',
          }),
          name: z.string(),
          phoneNumber: z.string().min(10).openapi({
            description: 'US phone numbers only',
            example: '555-555-5555',
          }),
        })
        .openapi({
          title: 'User',
          description: 'A user schema',
        }),
    },
  },
  updateUser: {
    method: 'POST',
    path: '/users/:id',
    pathParams: z.object({
      id: z.string().openapi({
        description: "The user's ID",
      }),
    }),
    body: z.object({
      title: z.string(),
      content: z.string(),
      published: z.boolean().optional(),
      description: z.string().optional(),
    }),
    responses: {
      200: z
        .object({
          id: z.string().uuid().openapi({
            title: 'Unique ID',
            description: 'A UUID generated by the server',
          }),
          name: z.string(),
          phoneNumber: z.string().min(10).openapi({
            description: 'US phone numbers only',
            example: '555-555-5555',
          }),
        })
        .openapi({
          title: 'User',
          description: 'A user schema',
        }),
    },
  },
})

export const openApiDocument = generateOpenApi(contract, {
  info: {
    title: 'Todos API',
    version: '1.0.0',
  },
})

type ApiRoutes = keyof typeof contract

export type ApiBody<T extends ApiRoutes> = T extends keyof typeof contract
  ? (typeof contract)[T] extends { body: z.ZodType }
    ? z.infer<(typeof contract)[T]['body']>
    : never
  : never

export type ApiResponse<T extends ApiRoutes> = T extends keyof typeof contract
  ? (typeof contract)[T] extends { responses: { 200: z.ZodType } }
    ? z.infer<(typeof contract)[T]['responses'][200]>
    : never
  : never
